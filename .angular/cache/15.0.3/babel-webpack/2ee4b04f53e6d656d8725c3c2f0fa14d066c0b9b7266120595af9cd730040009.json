{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class PhoneValidDirective {\n  constructor(element) {\n    this.element = element;\n  }\n  onChange() {\n    alert('onchange');\n    for (let index = 0; index < this.element.nativeElement.value.length; index++) {\n      const char = this.element.nativeElement.value[index];\n      if (char > '1' && char < '0') alert(char);\n    }\n  }\n}\nPhoneValidDirective.ɵfac = function PhoneValidDirective_Factory(t) {\n  return new (t || PhoneValidDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nPhoneValidDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: PhoneValidDirective,\n  selectors: [[\"\", \"appPhoneValid\", \"\"]],\n  hostBindings: function PhoneValidDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"change\", function PhoneValidDirective_change_HostBindingHandler() {\n        return ctx.onChange();\n      });\n    }\n  }\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,mBAAmB;EAW9BC,YAAmBC,OAAkB;IAAlB,YAAO,GAAPA,OAAO;EAE1B;EAXFC,QAAQ;IACNC,KAAK,CAAC,UAAU,CAAC;IAClB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACH,OAAO,CAACI,aAAa,CAACC,KAAK,CAACC,MAAM,EAAEH,KAAK,EAAE,EAAE;MAC7E,MAAMI,IAAI,GAAG,IAAI,CAACP,OAAO,CAACI,aAAa,CAACC,KAAK,CAACF,KAAK,CAAC;MACpD,IAAGI,IAAI,GAAC,GAAG,IAAGA,IAAI,GAAC,GAAG,EACtBL,KAAK,CAACK,IAAI,CAAC;;EAGb;;AAVaT,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAU;EAAAC;IAAA;;eAAnBC,cAAU;MAAA","names":["PhoneValidDirective","constructor","element","onChange","alert","index","nativeElement","value","length","char","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["D:\\חומר יד\\angular\\פרוייקט\\project\\src\\app\\Directions\\phone-valid.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appPhoneValid]'\n})\nexport class PhoneValidDirective {\n@HostListener('change')\nonChange(){\n  alert('onchange')\n for (let index = 0; index < this.element.nativeElement.value.length; index++) {\n  const char = this.element.nativeElement.value[index];\n  if(char>'1' &&char<'0')\n  alert(char)\n }\n  \n}\n  constructor(public element:ElementRef) { \n     \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}